#na.omit(as.numeric(unlist(strsplit(string, "[^0-9]+"))))
na.omit(as.numeric(unlist(regmatches(string, m))))
}
parse_dataset_from_string("12,13, 14, 15.3;1e-3")
parse_dataset_from_string <- function(string) {
re <- "(\\d+\\.\\d+e-?\\d+)|(\\d+\\.\\d+)|(\\d+)"
m <- gregexpr(re, string)
#na.omit(as.numeric(unlist(strsplit(string, "[^0-9]+"))))
na.omit(as.numeric(unlist(regmatches(string, m))))
}
parse_dataset_from_string("12,13, 14, 15.3;1e-3")
as.numeric("1e-3")
strsplit
?strsplit
parse_dataset_from_string <- function(string) {
# re <- "(\\d+\\.\\d+e-?\\d+)|(\\d+\\.\\d+)|(\\d+)"
# m <- gregexpr(re, string)
na.omit(as.numeric(unlist(strsplit(string, "\\s*(,|;)\s*"))))
#na.omit(as.numeric(unlist(regmatches(string, m))))
}
parse_dataset_from_string <- function(string) {
# re <- "(\\d+\\.\\d+e-?\\d+)|(\\d+\\.\\d+)|(\\d+)"
# m <- gregexpr(re, string)
#na.omit(as.numeric(unlist(regmatches(string, m))))
na.omit(as.numeric(unlist(strsplit(string, "\\s*(,|;)\\s*"))))
}
parse_dataset_from_string("12,13, 14, 15.3;1e-3")
parse_dataset_from_string("12,13, 14, 15.3;1e-3 kuk")
parse_dataset_from_string <- function(string) {
# re <- "(\\d+\\.\\d+e-?\\d+)|(\\d+\\.\\d+)|(\\d+)"
# m <- gregexpr(re, string)
#na.omit(as.numeric(unlist(regmatches(string, m))))
na.omit(as.numeric(unlist(strsplit(string, "\\s*(,|;|[a-zA-Z]+)\\s*"))))
}
parse_dataset_from_string("12,13, 14, 15.3;1e-3 kuk")
install.packages("BEST")
install.packages("BEST")
install.packages("BEST")
install.packages("BEST")
library(rjags)
install.packages("rjags")
install.packages("rjags", dependencies=TRUE)
install.packages( pkg = "rjags", configure.args = "--with-jags-lib=/usr/local/Cellar/jags/3.4.0/lib --enable-rpath")
install.packages('inline')
install.packages('Rcpp')
library(inline)
library(Rcpp)
src <- '
std::vector<std::string> s;
s.push_back("hello");
s.push_back("world");
return Rcpp::wrap(s);
'
hellofun <- cxxfunction(body = src, includes = '', plugin = 'Rcpp', verbose = FALSE)
cat(hellofun(), '\n')
library(rstan)
options(repos = c(getOption("repos"), rstan = "http://wiki.rstan-repo.googlecode.com/git/"))
install.packages('rstan', type = 'source')
install.packages("rjags")
install.packages("BEST")
library(BEST)
?BEST
a <- c(10, 20, 12, 14, 11, 9, 10, 4, 17, 32, 32)
b <- c(12, 7, 21, 24, 18, 15, 17, 23)
BESTmcmc(a, b)
r <- BESTmcmc(a, b)
plot(r)
?BEST
plot(r, "sd")
?BEST
plotAll(r)
?BEST
pairs(r)
?BEST
powerRet <- BESTpower(BESTout, N1=length(y1), N2=length(y2),
ROPEm=c(-0.1,0.1), maxHDIWm=2.0, nRep=2)
powerRet <- BESTpower(r, N1=length(a), N2=length(b),
ROPEm=c(-0.1,0.1), maxHDIWm=2.0, nRep=2)
y0 <- c(1.89, 1.78, 1.30, 1.74, 1.33, 0.89)
BESTout1 <- BESTmcmc(y0)
BESTout1
summary(BESTout1)
plot(BESTout1)
library(devtools)
install_github("gitstats", "opencpu")
library(opencpu)
install.packages("opencpu")
library(opencpu)
install.packages("opencpu")
install.packages("opencpu")
install.packages("opencpu", type = "source")
library(OpenCPU)
library(opencpu)
all.packages <- installed.packages()
r.version <- paste(version[['major']], '.', version[['minor']], sep = '')
for (i in 1:nrow(all.packages))
{
package.name <- all.packages[i, 1]
package.version <- all.packages[i, 3]
if (package.version != r.version)
{
print(paste('Installing', package.name))
install.packages(package.name)
}
}
install.packages("/Users/feldt/dev/ClearStats-front/spikes/opencpu-webapp", type="source")
install.packages("/Users/feldt/dev/ClearStats-front/spikes/clearstats-opencpu.tar.gz", type="source")
install.packages("/Users/feldt/dev/ClearStats-front/spikes/opencpu/clearstats.tar.gz", type="source")
library(opencpu)
opencpu$browse("library/clearstats/www")
install.packages("/Users/feldt/dev/ClearStats-front/spikes/opencpu/clearstats.tar.gz", type="source")
load("~/Downloads/setup3.RData")
View(minimal.ap)
View(minimal.ranking)
View(minimal.ranking_long)
View(realistic.ranking_long)
min(realistic.ranking_long)
min(realistic.ranking_long$Rank)
max(realistic.ranking_long$Rank)
View(realistic.MAP)
View(realistic.ranking)
View(realistic.ranking_long)
min(realistic.ranking_long$Rank)
View(realistic.ranking)
library(lme4)
View(realistic.MAP)
View(realistic.ranking_long)
View(realistic.ranking_long)
f <- lmer(Rank ~ 1 + (1 | Statistic) + (1 | Input), realistic.ranking_long)
print(f)
f <- lmer(Rank ~ 1 + (1 | Statistic), realistic.ranking_long)
print(f)
d <- realistic.ranking_long
str(d)
f <- lmer(Rank ~ 1 + (1 | Statistic) + (1 | Input), realistic.ranking_long)
f
(update(f, REML = FALSE))
?aov
library(ez)
View(realistic.ranking_long)
?ezANOVA
ezANOVA(realistic.ranking_long, Rank, Testcase, within=c(Input, Statistic), perms=100)
ezANOVA(realistic.ranking_long, Rank, Testcase, within=c(Input, Statistic))
ezPerm(realistic.ranking_long, Rank, Testcase, within=c(Input, Statistic), perms=100)
ezPerm(realistic.ranking_long, Rank, Testcase, within=c(Input, Statistic), perms=200)
ezPerm(realistic.ranking_long, Rank, Testcase, within=c(Input, Statistic), perms=400)
ezPerm(realistic.ranking_long, Rank, Testcase, within=c(Input, Statistic), perms=1000)
install.packages("BayesFactor")
library(BayesFactor)
r <- anovaBF(Rank ~ Statistic + Input + Testcase, data = realistic.ranking_long, whichRandom="Testcase")
r
data(sleep)
plot(extra ~ group, data = sleep)
plot(r)
data(sleep)
plot(extra ~ group, sleep)
summary(aov(extra ~ group + Error(ID/group), data = sleep))
summary(aov(extra ~ group + Error(ID/group), data = sleep))
summary(aov(extra ~ group + Error(ID/group), data = sleep))
anovaBF(extra ~ group + ID, data = sleep, whichRandom = "ID",
progress=FALSE)
anovaBF(extra ~group + ID, data = sleep, whichRandom = "ID")
library(BayesFactor)
r <- anovaBF(Rank ~ Statistic + Input + Testcase, data = realistic.ranking_long, whichRandom="Testcase")
r
mfull <- lmBF(Rank ~ Statistic + Input + Statistic*Input + Testcase, data = realistic.ranking_long, whichRandom="Testcase")
mmain <- lmBF(Rank ~ Statistic + Input + Testcase, data = realistic.ranking_long, whichRandom="Testcase")
mmain/mfull
mfull
str(sleep)
r <- regressionBF(Rank ~ Statistic + Input + Testcase, data = realistic.ranking_long, whichRandom="Testcase")
r <- regressionBF(Rank ~ Statistic + Input + Testcase, data = realistic.ranking_long, whichModels="all")
r <- regressionBF(Rank ~ Statistic + Input + Testcase, data = minimal.ranking_long, whichModels="all")
r <- anovaBF(Rank ~ Statistic + Input + Testcase, data = minimal.ranking_long, whichRandom="Testcase")
r
max(realistic.ranking_long$Rank)
install.packages("parcor")
library(parcor)
adalasso
?adalasso
library(devtools)
install_github("markdownapp", "opencpu")
library(opencpu)
opencpu$browse("/library/markdownapp/www")
setwd("/Users/feldt/shared/simon_poulding/stochastic_prog_testgen/src/julia_to_boost_gl_interface/empirical_work_for_paper")
source("common_analysis_scripts/load_data.R")
data <- load_data_and_expand_covariate_set(
"q1_accurate_modeling/boyer_myrvold_planarity/measurements1.csv",
"SUT_ExecTime", c("I_NumNodes", "I_NumEdges"), c("N", "E"))
source("common_analysis_scripts/leaps_regression_analysis.R")
library(caret)
install.packages("caret")
library(caret)
library(mlbench)
data(Sonar)
str(Sonar[, 1:10])
install.packages("mlbench")
library(mlbench)
data(Sonar)
str(Sonar[, 1:10])
library(caret)
set.seed(998)
inTraining <- createDataPartition(Sonar$Class, p = 0.75, list = FALSE)
training <- Sonar[inTraining, ]
testing <- Sonar[-inTraining, ]
fitControl <- trainControl(## 10-fold CV
method = "repeatedcv",
number = 10,
## repeated ten times
repeats = 10)
set.seed(825)
gbmFit1 <- train(Class ~ ., data = training,
method = "gbm",
trControl = fitControl,
## This last option is actually one
## for gbm() that passes through
verbose = FALSE)
install.packages("e1071")
set.seed(825)
gbmFit1 <- train(Class ~ ., data = training,
method = "gbm",
trControl = fitControl,
## This last option is actually one
## for gbm() that passes through
verbose = FALSE)
gbmFit1
View(data)
d <- data[,c["covariates = c["N", "LogN", "NLogN", "N2", "E", "LogE", "ELogE", "E2"]
"]]
covariates = c["N", "LogN", "NLogN", "N2", "E", "LogE", "ELogE", "E2"]
]
covariates = c["N", "LogN", "NLogN", "N2", "E", "LogE", "ELogE", "E2"]
covariates = c("N", "LogN", "NLogN", "N2", "E", "LogE", "ELogE", "E2")
d <- data[, covariates]
View(d)
d <- data[, covariates]
y <- data$SUT_ExecTimeUs
d$SUT_ExecTimeUs <- data$SUT_ExecTimeUs
View(d)
library(caret)
set.seed(825)
# Repeated 10-fold CV
fitControl <- trainControl(## 10-fold CV
method = "repeatedcv",
number = 10,
## repeated ten times
repeats = 10)
g1 <- train(SUT_ExecTime ~ ., data = d,
method = "gbm",
trControl = fitControl,
## This last option is actually one
## for gbm() that passes through
verbose = TRUE)
g1 <- train(SUT_ExecTimeUs ~ ., data = d,
method = "gbm",
trControl = fitControl,
## This last option is actually one
## for gbm() that passes through
verbose = TRUE)
g1
g1 <- train(SUT_ExecTimeUs ~ 1 + N + LogN + NLogN + N2, data = d,
method = "gbm",
trControl = fitControl,
## This last option is actually one
## for gbm() that passes through
verbose = FALSE)
g1
plot(g1)
m1 <- train(SUT_ExecTimeUs ~ 1 + N + LogN + NLogN + N2 + E + LogE + ELogE + E2, data = d,
method = "bagEarth",
trControl = fitControl,
## This last option is actually one
## for gbm() that passes through
verbose = FALSE)
warnings()
m1 <- train(SUT_ExecTimeUs ~ 1 + N + LogN + NLogN + N2 + E + LogE + ELogE + E2, data = d,
method = "bagEarth",
trControl = fitControl)
cv5 <- trainControl(method = "repeatedcv",
number = 5)
m1 <- train(SUT_ExecTimeUs ~ 1 + N + LogN + NLogN + N2 + E + LogE + ELogE + E2, data = d,
method = "bagEarth",
trControl = cVctrl)
m1 <- train(SUT_ExecTimeUs ~ 1 + N + LogN + NLogN + N2 + E + LogE + ELogE + E2, data = d,
method = "bagEarth",
trControl = cv5)
m1
plot(m1)
names(m1)
m1$finalModel
descrCor <- cor(d)
descrCor
highCorr <- sum(abs(descrCor[upper.tri(descrCor)]) > 0.999)
highCorr
abs(descrCor[upper.tri(descrCor)]) > 0.999
descrCor[upper.tri(descrCor)]
summary(descrCor[upper.tri(descrCor)])
m1
varImp(m1)
setwd("/Users/feldt/shared/simon_poulding/stochastic_prog_testgen/src/julia_to_boost_gl_interface/empirical_work_for_paper")
source("common_analysis_scripts/load_data.R")
data <- load_data_and_expand_covariate_set(
"q1_accurate_modeling/boyer_myrvold_planarity/measurements1.csv",
"SUT_ExecTime", c("I_NumNodes", "I_NumEdges"), c("N", "E"))
source("common_analysis_scripts/leaps_regression_analysis.R")
covariates = c("N", "LogN", "NLogN", "N2", "E", "LogE", "ELogE", "E2")
d <- data[, covariates]
d$SUT_ExecTimeUs <- data$SUT_ExecTimeUs
# RFE = Repeated Feature Selection with linear models using caret
library(caret)
set.seed(825)
ctrl <- rfeControl(
functions = lmFuncs,
method = "repeatedcv", repeats = 5,
verbose = FALSE
)
subsets <- 1:4
lmProfile <- rfe(x, y, sizes = subsets, rfeControl = ctrl)
x <- data[, covariates]
subsets <- 1:4
lmProfile <- rfe(x, y, sizes = subsets, rfeControl = ctrl)
lmProfile
mapped_names <- function(n, order = 10) {
mns <- c()
if(order < 0) {mns <- c(mns)}
if(order >= 0 && order < 0.5) {mns <- c(mns, n)}
return mns;
}
mns <- c()
mns
?ifelse
mapped_names <- function(n, order = 10) {
mns <- c();
mns <- ifelse(order >= 0 && order < 0.5, c(mns, n), mns)
return mns;
}
mapped_names <- function(n, order = 10) {
mns <- c();
mns <- ifelse(order >= 0 && order < 0.5, c(mns, n), mns);
return(mns);
}
mapped_names("N")
order = 10
mapped_names <- function(n, order = 10) {
mns <- c();
mns <- ifelse(order >= 0, c(mns, n), mns);
return(mns);
}
mapped_names("N")
mapped_names <- function(n, order = 10) {
mns <- c();
mns <- ifelse(order >= 0.5, c(mns, paste("Sqrt", n, sep="")), mns);
mns <- ifelse(order >= 1, c(mns, n), mns);
mns <- ifelse(order >= 1.5, c(mns, paste("Log", n, sep=""), mns);
mns <- ifelse(order >= 1.75, c(mns, paste(n, "Log", n, sep=""), mns);
mns <- ifelse(order >= 2.0, c(mns, paste(n, "2", sep=""), mns);
mns <- ifelse(order >= 3.0, c(mns, paste(n, "3", sep=""), mns);
return(mns);
}
mapped_names <- function(n, order = 3) {
mns <- c();
mns <- ifelse(order >= 0.5, c(mns, paste("Sqrt", n, sep="")), mns);
mns <- ifelse(order >= 1, c(mns, n), mns);
mns <- ifelse(order >= 1.5, c(mns, paste("Log", n, sep="")), mns);
mns <- ifelse(order >= 1.75, c(mns, paste(n, "Log", n, sep="")), mns);
mns <- ifelse(order >= 2.0, c(mns, paste(n, "2", sep="")), mns);
mns <- ifelse(order >= 3.0, c(mns, paste(n, "3", sep="")), mns);
return(mns);
}
mapped_names("N")
mapped_names("N", 10)
mapped_names <- function(n, order = 3.0) {
ns <- c();
ns <- ifelse(order >= 0.5, c(ns, paste("Sqrt", n, sep="")), ns);
ns <- ifelse(order >= 1, c(ns, n), ns);
ns <- ifelse(order >= 1.5, c(ns, paste("Log", n, sep="")), ns);
ns <- ifelse(order >= 1.75, c(ns, paste(n, "Log", n, sep="")), ns);
ns <- ifelse(order >= 2.0, c(ns, paste(n, "2", sep="")), ns);
ns <- ifelse(order >= 3.0, c(ns, paste(n, "3", sep="")), ns);
return(ns);
}
mapped_names("N", 10)
mapped_names("N", 0)
ns <- c();
order = 3
ns <- ifelse(order >= 0.5, c(ns, paste("Sqrt", n, sep="")), ns);
n = "N"
ns <- ifelse(order >= 0.5, c(ns, paste("Sqrt", n, sep="")), ns);
ns
c(ns, "N")
order
ns <- ifelse(order >= 1, c(ns, n), ns);
ns
order >= 1
c(ns, n)
ns
if(order >= 0.5) {ns <- c(ns, paste("Sqrt", n, sep=""))}
ns
if(order >= 1.0) {ns <- c(ns, n)}
ns
mapped_names <- function(n, order = 3.0) {
ns <- c();
if(order >= 0.50) {ns <- c(ns, paste("Sqrt", n, sep=""))}
if(order >= 1.00) {ns <- c(ns, n)}
if(order >= 1.50) {ns <- c(ns, paste("Log", n, sep=""))}
if(order >= 1.75) {ns <- c(ns, paste(n, "Log", n, sep=""))}
if(order >= 2.00) {ns <- c(ns, paste(n, "2", sep=""))}
if(order >= 3.00) {ns <- c(ns, paste(n, "3", sep=""))}
return(ns);
}
mapped_names("N", 0)
mapped_names("N", 0.5)
mapped_names("N", 0.75)
mapped_names("N", 1.4)
mapped_names("N", 1.5)
mapped_names("N", 1.75)
mapped_names("N", 2)
mapped_names("N", 3)
covariates = c(mapped_names("N"), mapped_names("E"))
covariates
x <- data[, covariates]
y <- data$SUT_ExecTimeUs
library(caret)
set.seed(825)
ctrl <- rfeControl(
functions = lmFuncs,
method = "repeatedcv", repeats = 5,
verbose = FALSE
)
subsets <- 1:4
lmProfile <- rfe(x, y, sizes = subsets, rfeControl = ctrl)
lmProfile
subsets <- 1:3
lmProfile <- rfe(x, y, sizes = subsets, rfeControl = ctrl)
lmProfile
covariates
predictors(lmProfile)
subsets <- 1:5
lmProfile <- rfe(x, y, sizes = subsets, rfeControl = ctrl)
lmPRofile
lmProfile
subsets <- 1:length(covariates)
lmProfile <- rfe(x, y, sizes = subsets, rfeControl = ctrl)
lmProfile
predictors(lmProfile)
lmProfile$fit
trellis.par.set(caretTheme())
plot(lmProfile, type = c("g", "o"))
head(lmProfile$resample)
lmFuncs
rfctrl <- rfeControl(
functions = lmFuncs,
method = "repeatedcv", repeats = 5,
verbose = FALSE
)
rfProfile <- rfe(x, y, sizes = subsets, rfeControl = rfctrl)
rfProfile
predictors(rfProfile)
trellis.par.set(caretTheme())
plot1 <- plot(rfProfile, type = c("g", "o"))
plot2 <- plot(rfProfile, type = c("g", "o"), metric = "Rsquared")
print(plot1, split=c(1,1,1,2), more=TRUE)
print(plot2, split=c(1,2,1,2))
trellis.par.set(caretTheme())
plot1 <- plot(lmProfile, type = c("g", "o"))
plot2 <- plot(lmProfile, type = c("g", "o"), metric = "Rsquared")
print(plot1, split=c(1,1,1,2), more=TRUE)
print(plot2, split=c(1,2,1,2))
trellis.par.set(caretTheme())
plot1 <- plot(lmProfile, type = c("g", "o"))
plot2 <- plot(lmProfile, type = c("g", "o"), metric = "Rsquared")
print(plot1, split=c(1,1,1,2), more=TRUE)
print(plot2, split=c(1,2,1,2))
trellis.par.set(theme1)
plot1 <- xyplot(rfProfile,
type = c("g", "p", "smooth"),
ylab = "RMSE CV Estimates")
plot2 <- densityplot(rfProfile,
subset = Variables < 5,
adjust = 1.25,
as.table = TRUE,
xlab = "RMSE CV Estimates",
pch = "|")
filterCtrl <- sbfControl(functions = rfSBF, method = "repeatedcv", repeats = 5)
set.seed(10)
rfWithFilter <- sbf(x, y, sbfControl = filterCtrl)
install.packages("gam")
install.packages("gam", type = "source")
lm_selected_covariates <- predictors(lmProfile)
lm_selected_covariates
rf_selected_covariates <- predictors(rfProfile)
rf_selected_covariates
install.packages("nnls")
xm <- as.matrix(x)
library(nnls)
nnfit <- nnls(xm,y)
nnfit
coef(nnfit)
coef(nnfit) > 0.0
covariates(coef(nnfit) > 0.0)
covariates[coef(nnfit) > 0.0]
uninstall
uninstall.packages
remove.packages("clearstats")
setwd("/Users/feldt/dev/clearstats")
library(devtools)
install('.')
install('.')
install('.')
remove.packages("clearstats")
library(devtools)
install_bitbucket("clearstats", "robertfeldt")
